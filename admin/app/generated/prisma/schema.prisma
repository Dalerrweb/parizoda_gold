// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  telegramId    Int      @unique
  username      String?
  first_name    String?
  last_name     String?
  photo_url     String?
  language_code String?
  orders        Order[]
  createdAt     DateTime @default(now())
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  imageUrl  String
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  price       Int // Цена в минимальной единице (например, в тийинах или центах)
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  Int
  images      ProductImage[]
  orders      Order[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id        Int         @id @default(autoincrement())
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  product   Product     @relation(fields: [productId], references: [id])
  productId Int
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

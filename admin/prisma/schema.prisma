generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuPrice {
  id           Int    @id @default(autoincrement())
  name         String
  pricePerGram BigInt
}

model User {
  id            Int      @id @default(autoincrement())
  telegramId    Int      @unique
  username      String?
  phone         String?
  first_name    String?
  last_name     String?
  photo_url     String?
  language_code String?
  orders        Order[]
  createdAt     DateTime @default(now())

  Transaction Transaction[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  imageUrl  String
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id          Int            @id @default(autoincrement())
  sku         String         @unique
  name        String
  description String?
  markup      String         @default("0")
  type        ProductType    @default(SINGLE)
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  Int
  images      ProductImage[]
  sizes       ProductSize[]

  parentBundle ProductBundle[] @relation("BundleParent")
  childBundles ProductBundle[] @relation("BundleChildren")

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  OrderItem  OrderItem[]
  BundleItem BundleItem[]
}

model ProductSize {
  id        Int     @id @default(autoincrement())
  size      String? // Например: "16", "17-18", "S/M"
  quantity  Int     @default(0) // Количество для конкретного размера
  weight    String?
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model ProductBundle {
  bundleId Int     @id @default(autoincrement())
  parent   Product @relation("BundleParent", fields: [parentId], references: [id])
  parentId Int
  child    Product @relation("BundleChildren", fields: [childId], references: [id])
  childId  Int
  quantity Int     @default(1)
}

enum ProductType {
  SINGLE
  BUNDLE
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model AdminUser {
  id        Int            @id @default(autoincrement())
  email     String         @unique
  password  String
  role      Role           @default(ADMIN)
  createdAt DateTime       @default(now())
  sessions  AdminSession[]
}

enum Role {
  ADMIN
  SUPERADMIN
}

model AdminSession {
  id        Int       @id @default(autoincrement())
  token     String    @unique
  user      AdminUser @relation(fields: [userId], references: [id])
  userId    Int
  expires   DateTime
  createdAt DateTime  @default(now())
}

model OtpCode {
  id        String   @id @default(cuid())
  type      String // например, "superadmin"
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Banner {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  link      String?
  isActive  Boolean  @default(true)
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// order

model Order {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  status       OrderStatus   @default(PENDING)
  items        OrderItem[]
  transactions Transaction[]
  paymentType  PaymentType
  goldPrice    BigInt

  totalAmount BigInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}

model OrderItem {
  id          Int          @id @default(autoincrement())
  order       Order        @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product      @relation(fields: [productId], references: [id])
  productId   Int
  quantity    Int          @default(1)
  price       BigInt // Фиксированная итоговая цена (уже рассчитанная)
  weight      String // Вес в граммах
  markup      String // Наценка (фиксируем на момент покупки)
  variantId   Int? // ID варианта товара
  type        ProductType // SINGLE или BUNDLE
  bundleItems BundleItem[] // Дочерние элементы для бандлов

  @@index([orderId])
  @@index([productId])
}

model BundleItem {
  id          Int       @id @default(autoincrement())
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  orderItemId Int
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  variantId   Int
  title       String
  image       String
  weight      String
  markup      String
  price       BigInt

  @@index([orderItemId])
  @@index([productId])
}

model Transaction {
  id         String            @id @default(uuid())
  invoiceId  String            @db.Uuid
  externalId String            @db.Uuid
  userId     Int
  amount     BigInt            @db.BigInt
  status     TransactionStatus
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  extraData  Json              @default("{}") // ✅ новое поле JSON по умолчанию {}

  user    User   @relation(fields: [userId], references: [id])
  Order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?
}

enum TransactionStatus {
  success
  pending
  failed
  refund
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

enum PaymentType {
  PREPAYMENTBYCARD // Предоплата по карте
  CASH // Наличный рассчет
  REFUND // Возврат
}
